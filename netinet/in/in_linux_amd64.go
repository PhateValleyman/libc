// Code generated by 'ccgo /tmp/go-generate-721359862/x.c -ccgo-crt-import-path  -ccgo-export-defines  -ccgo-export-enums  -ccgo-export-externs X -ccgo-export-fields F -ccgo-export-structs  -ccgo-export-typedefs  -ccgo-pkgname in -o netinet/in/in_linux_amd64.go', DO NOT EDIT.

package in

import (
	"math"
	"reflect"
	"unsafe"
)

var _ = math.Pi
var _ reflect.Kind
var _ unsafe.Pointer

const (
	AF_ALG                           = 38
	AF_APPLETALK                     = 5
	AF_ASH                           = 18
	AF_ATMPVC                        = 8
	AF_ATMSVC                        = 20
	AF_AX25                          = 3
	AF_BLUETOOTH                     = 31
	AF_BRIDGE                        = 7
	AF_CAIF                          = 37
	AF_CAN                           = 29
	AF_DECnet                        = 12
	AF_ECONET                        = 19
	AF_FILE                          = 1
	AF_IB                            = 27
	AF_IEEE802154                    = 36
	AF_INET                          = 2
	AF_INET6                         = 10
	AF_IPX                           = 4
	AF_IRDA                          = 23
	AF_ISDN                          = 34
	AF_IUCV                          = 32
	AF_KCM                           = 41
	AF_KEY                           = 15
	AF_LLC                           = 26
	AF_LOCAL                         = 1
	AF_MAX                           = 44
	AF_MPLS                          = 28
	AF_NETBEUI                       = 13
	AF_NETLINK                       = 16
	AF_NETROM                        = 6
	AF_NFC                           = 39
	AF_PACKET                        = 17
	AF_PHONET                        = 35
	AF_PPPOX                         = 24
	AF_QIPCRTR                       = 42
	AF_RDS                           = 21
	AF_ROSE                          = 11
	AF_ROUTE                         = 16
	AF_RXRPC                         = 33
	AF_SECURITY                      = 14
	AF_SMC                           = 43
	AF_SNA                           = 22
	AF_TIPC                          = 30
	AF_UNIX                          = 1
	AF_UNSPEC                        = 0
	AF_VSOCK                         = 40
	AF_WANPIPE                       = 25
	AF_X25                           = 9
	BIG_ENDIAN                       = 4321
	BYTE_ORDER                       = 1234
	FD_SETSIZE                       = 1024
	FIOGETOWN                        = 0x8903
	FIOSETOWN                        = 0x8901
	INET6_ADDRSTRLEN                 = 46
	INET_ADDRSTRLEN                  = 16
	IN_CLASSA_HOST                   = 16777215
	IN_CLASSA_MAX                    = 128
	IN_CLASSA_NET                    = 0xff000000
	IN_CLASSA_NSHIFT                 = 24
	IN_CLASSB_HOST                   = 65535
	IN_CLASSB_MAX                    = 65536
	IN_CLASSB_NET                    = 0xffff0000
	IN_CLASSB_NSHIFT                 = 16
	IN_CLASSC_HOST                   = 255
	IN_CLASSC_NET                    = 0xffffff00
	IN_CLASSC_NSHIFT                 = 8
	IN_LOOPBACKNET                   = 127
	IPV6_2292DSTOPTS                 = 4
	IPV6_2292HOPLIMIT                = 8
	IPV6_2292HOPOPTS                 = 3
	IPV6_2292PKTINFO                 = 2
	IPV6_2292PKTOPTIONS              = 6
	IPV6_2292RTHDR                   = 5
	IPV6_ADDRFORM                    = 1
	IPV6_ADDR_PREFERENCES            = 72
	IPV6_ADD_MEMBERSHIP              = 20
	IPV6_AUTHHDR                     = 10
	IPV6_AUTOFLOWLABEL               = 70
	IPV6_CHECKSUM                    = 7
	IPV6_DONTFRAG                    = 62
	IPV6_DROP_MEMBERSHIP             = 21
	IPV6_DSTOPTS                     = 59
	IPV6_FREEBIND                    = 78
	IPV6_HDRINCL                     = 36
	IPV6_HOPLIMIT                    = 52
	IPV6_HOPOPTS                     = 54
	IPV6_IPSEC_POLICY                = 34
	IPV6_JOIN_ANYCAST                = 27
	IPV6_JOIN_GROUP                  = 20
	IPV6_LEAVE_ANYCAST               = 28
	IPV6_LEAVE_GROUP                 = 21
	IPV6_MINHOPCOUNT                 = 73
	IPV6_MTU                         = 24
	IPV6_MTU_DISCOVER                = 23
	IPV6_MULTICAST_HOPS              = 18
	IPV6_MULTICAST_IF                = 17
	IPV6_MULTICAST_LOOP              = 19
	IPV6_NEXTHOP                     = 9
	IPV6_ORIGDSTADDR                 = 74
	IPV6_PATHMTU                     = 61
	IPV6_PKTINFO                     = 50
	IPV6_PMTUDISC_DO                 = 2
	IPV6_PMTUDISC_DONT               = 0
	IPV6_PMTUDISC_INTERFACE          = 4
	IPV6_PMTUDISC_OMIT               = 5
	IPV6_PMTUDISC_PROBE              = 3
	IPV6_PMTUDISC_WANT               = 1
	IPV6_RECVDSTOPTS                 = 58
	IPV6_RECVERR                     = 25
	IPV6_RECVFRAGSIZE                = 77
	IPV6_RECVHOPLIMIT                = 51
	IPV6_RECVHOPOPTS                 = 53
	IPV6_RECVORIGDSTADDR             = 74
	IPV6_RECVPATHMTU                 = 60
	IPV6_RECVPKTINFO                 = 49
	IPV6_RECVRTHDR                   = 56
	IPV6_RECVTCLASS                  = 66
	IPV6_ROUTER_ALERT                = 22
	IPV6_RTHDR                       = 57
	IPV6_RTHDRDSTOPTS                = 55
	IPV6_RTHDR_LOOSE                 = 0
	IPV6_RTHDR_STRICT                = 1
	IPV6_RTHDR_TYPE_0                = 0
	IPV6_RXDSTOPTS                   = 59
	IPV6_RXHOPOPTS                   = 54
	IPV6_TCLASS                      = 67
	IPV6_TRANSPARENT                 = 75
	IPV6_UNICAST_HOPS                = 16
	IPV6_UNICAST_IF                  = 76
	IPV6_V6ONLY                      = 26
	IPV6_XFRM_POLICY                 = 35
	IP_ADD_MEMBERSHIP                = 35
	IP_ADD_SOURCE_MEMBERSHIP         = 39
	IP_BIND_ADDRESS_NO_PORT          = 24
	IP_BLOCK_SOURCE                  = 38
	IP_CHECKSUM                      = 23
	IP_DEFAULT_MULTICAST_LOOP        = 1
	IP_DEFAULT_MULTICAST_TTL         = 1
	IP_DROP_MEMBERSHIP               = 36
	IP_DROP_SOURCE_MEMBERSHIP        = 40
	IP_FREEBIND                      = 15
	IP_HDRINCL                       = 3
	IP_IPSEC_POLICY                  = 16
	IP_MAX_MEMBERSHIPS               = 20
	IP_MINTTL                        = 21
	IP_MSFILTER                      = 41
	IP_MTU                           = 14
	IP_MTU_DISCOVER                  = 10
	IP_MULTICAST_ALL                 = 49
	IP_MULTICAST_IF                  = 32
	IP_MULTICAST_LOOP                = 34
	IP_MULTICAST_TTL                 = 33
	IP_NODEFRAG                      = 22
	IP_OPTIONS                       = 4
	IP_ORIGDSTADDR                   = 20
	IP_PASSSEC                       = 18
	IP_PKTINFO                       = 8
	IP_PKTOPTIONS                    = 9
	IP_PMTUDISC                      = 10
	IP_PMTUDISC_DO                   = 2
	IP_PMTUDISC_DONT                 = 0
	IP_PMTUDISC_INTERFACE            = 4
	IP_PMTUDISC_OMIT                 = 5
	IP_PMTUDISC_PROBE                = 3
	IP_PMTUDISC_WANT                 = 1
	IP_RECVERR                       = 11
	IP_RECVFRAGSIZE                  = 25
	IP_RECVOPTS                      = 6
	IP_RECVORIGDSTADDR               = 20
	IP_RECVRETOPTS                   = 7
	IP_RECVTOS                       = 13
	IP_RECVTTL                       = 12
	IP_RETOPTS                       = 7
	IP_ROUTER_ALERT                  = 5
	IP_TOS                           = 1
	IP_TRANSPARENT                   = 19
	IP_TTL                           = 2
	IP_UNBLOCK_SOURCE                = 37
	IP_UNICAST_IF                    = 50
	IP_XFRM_POLICY                   = 17
	LITTLE_ENDIAN                    = 1234
	MCAST_BLOCK_SOURCE               = 43
	MCAST_EXCLUDE                    = 0
	MCAST_INCLUDE                    = 1
	MCAST_JOIN_GROUP                 = 42
	MCAST_JOIN_SOURCE_GROUP          = 46
	MCAST_LEAVE_GROUP                = 45
	MCAST_LEAVE_SOURCE_GROUP         = 47
	MCAST_MSFILTER                   = 48
	MCAST_UNBLOCK_SOURCE             = 44
	PDP_ENDIAN                       = 3412
	PF_ALG                           = 38
	PF_APPLETALK                     = 5
	PF_ASH                           = 18
	PF_ATMPVC                        = 8
	PF_ATMSVC                        = 20
	PF_AX25                          = 3
	PF_BLUETOOTH                     = 31
	PF_BRIDGE                        = 7
	PF_CAIF                          = 37
	PF_CAN                           = 29
	PF_DECnet                        = 12
	PF_ECONET                        = 19
	PF_FILE                          = 1
	PF_IB                            = 27
	PF_IEEE802154                    = 36
	PF_INET                          = 2
	PF_INET6                         = 10
	PF_IPX                           = 4
	PF_IRDA                          = 23
	PF_ISDN                          = 34
	PF_IUCV                          = 32
	PF_KCM                           = 41
	PF_KEY                           = 15
	PF_LLC                           = 26
	PF_LOCAL                         = 1
	PF_MAX                           = 44
	PF_MPLS                          = 28
	PF_NETBEUI                       = 13
	PF_NETLINK                       = 16
	PF_NETROM                        = 6
	PF_NFC                           = 39
	PF_PACKET                        = 17
	PF_PHONET                        = 35
	PF_PPPOX                         = 24
	PF_QIPCRTR                       = 42
	PF_RDS                           = 21
	PF_ROSE                          = 11
	PF_ROUTE                         = 16
	PF_RXRPC                         = 33
	PF_SECURITY                      = 14
	PF_SMC                           = 43
	PF_SNA                           = 22
	PF_TIPC                          = 30
	PF_UNIX                          = 1
	PF_UNSPEC                        = 0
	PF_VSOCK                         = 40
	PF_WANPIPE                       = 25
	PF_X25                           = 9
	SCM_TIMESTAMP                    = 29
	SCM_TIMESTAMPING                 = 37
	SCM_TIMESTAMPING_OPT_STATS       = 54
	SCM_TIMESTAMPING_PKTINFO         = 58
	SCM_TIMESTAMPNS                  = 35
	SCM_TXTIME                       = 61
	SCM_WIFI_STATUS                  = 41
	SIOCATMARK                       = 0x8905
	SIOCGPGRP                        = 0x8904
	SIOCGSTAMP                       = 0x8906
	SIOCGSTAMPNS                     = 0x8907
	SIOCSPGRP                        = 0x8902
	SOL_AAL                          = 265
	SOL_ALG                          = 279
	SOL_ATM                          = 264
	SOL_BLUETOOTH                    = 274
	SOL_CAIF                         = 278
	SOL_DCCP                         = 269
	SOL_DECNET                       = 261
	SOL_ICMPV6                       = 58
	SOL_IP                           = 0
	SOL_IPV6                         = 41
	SOL_IRDA                         = 266
	SOL_IUCV                         = 277
	SOL_KCM                          = 281
	SOL_LLC                          = 268
	SOL_NETBEUI                      = 267
	SOL_NETLINK                      = 270
	SOL_NFC                          = 280
	SOL_PACKET                       = 263
	SOL_PNPIPE                       = 275
	SOL_PPPOL2TP                     = 273
	SOL_RAW                          = 255
	SOL_RDS                          = 276
	SOL_RXRPC                        = 272
	SOL_SOCKET                       = 1
	SOL_TIPC                         = 271
	SOL_TLS                          = 282
	SOL_X25                          = 262
	SOMAXCONN                        = 128
	SO_ACCEPTCONN                    = 30
	SO_ATTACH_BPF                    = 50
	SO_ATTACH_FILTER                 = 26
	SO_ATTACH_REUSEPORT_CBPF         = 51
	SO_ATTACH_REUSEPORT_EBPF         = 52
	SO_BINDTODEVICE                  = 25
	SO_BPF_EXTENSIONS                = 48
	SO_BROADCAST                     = 6
	SO_BSDCOMPAT                     = 14
	SO_BUSY_POLL                     = 46
	SO_CNX_ADVICE                    = 53
	SO_COOKIE                        = 57
	SO_DEBUG                         = 1
	SO_DETACH_BPF                    = 27
	SO_DETACH_FILTER                 = 27
	SO_DOMAIN                        = 39
	SO_DONTROUTE                     = 5
	SO_ERROR                         = 4
	SO_GET_FILTER                    = 26
	SO_INCOMING_CPU                  = 49
	SO_INCOMING_NAPI_ID              = 56
	SO_KEEPALIVE                     = 9
	SO_LINGER                        = 13
	SO_LOCK_FILTER                   = 44
	SO_MARK                          = 36
	SO_MAX_PACING_RATE               = 47
	SO_MEMINFO                       = 55
	SO_NOFCS                         = 43
	SO_NO_CHECK                      = 11
	SO_OOBINLINE                     = 10
	SO_PASSCRED                      = 16
	SO_PASSSEC                       = 34
	SO_PEEK_OFF                      = 42
	SO_PEERCRED                      = 17
	SO_PEERGROUPS                    = 59
	SO_PEERNAME                      = 28
	SO_PEERSEC                       = 31
	SO_PRIORITY                      = 12
	SO_PROTOCOL                      = 38
	SO_RCVBUF                        = 8
	SO_RCVBUFFORCE                   = 33
	SO_RCVLOWAT                      = 18
	SO_RCVTIMEO                      = 20
	SO_REUSEADDR                     = 2
	SO_REUSEPORT                     = 15
	SO_RXQ_OVFL                      = 40
	SO_SECURITY_AUTHENTICATION       = 22
	SO_SECURITY_ENCRYPTION_NETWORK   = 24
	SO_SECURITY_ENCRYPTION_TRANSPORT = 23
	SO_SELECT_ERR_QUEUE              = 45
	SO_SNDBUF                        = 7
	SO_SNDBUFFORCE                   = 32
	SO_SNDLOWAT                      = 19
	SO_SNDTIMEO                      = 21
	SO_TIMESTAMP                     = 29
	SO_TIMESTAMPING                  = 37
	SO_TIMESTAMPNS                   = 35
	SO_TXTIME                        = 61
	SO_TYPE                          = 3
	SO_WIFI_STATUS                   = 41
	SO_ZEROCOPY                      = 60
	X_ATFILE_SOURCE                  = 1
	X_BITS_BYTESWAP_H                = 1
	X_BITS_PTHREADTYPES_ARCH_H       = 1
	X_BITS_PTHREADTYPES_COMMON_H     = 1
	X_BITS_SOCKADDR_H                = 1
	X_BITS_STDINT_INTN_H             = 1
	X_BITS_STDINT_UINTN_H            = 1
	X_BITS_TYPESIZES_H               = 1
	X_BITS_TYPES_H                   = 1
	X_BITS_UINTN_IDENTITY_H          = 1
	X_BSD_SIZE_T_                    = 0
	X_BSD_SIZE_T_DEFINED_            = 0
	X_DEFAULT_SOURCE                 = 1
	X_ENDIAN_H                       = 1
	X_FEATURES_H                     = 1
	X_GCC_SIZE_T                     = 0
	X_LP64                           = 1
	X_NETINET_IN_H                   = 1
	X_POSIX_C_SOURCE                 = 200809
	X_POSIX_SOURCE                   = 1
	X_SIZET_                         = 0
	X_SIZE_T                         = 0
	X_SIZE_T_                        = 0
	X_SIZE_T_DECLARED                = 0
	X_SIZE_T_DEFINED                 = 0
	X_SIZE_T_DEFINED_                = 0
	X_SS_SIZE                        = 128
	X_STDC_PREDEF_H                  = 1
	X_STRUCT_TIMESPEC                = 1
	X_SYS_CDEFS_H                    = 1
	X_SYS_SELECT_H                   = 1
	X_SYS_SIZE_T_H                   = 0
	X_SYS_SOCKET_H                   = 1
	X_SYS_TYPES_H                    = 1
	X_THREAD_SHARED_TYPES_H          = 1
	X_T_SIZE                         = 0
	X_T_SIZE_                        = 0
	Linux                            = 1
	Unix                             = 1
)

// Standard well-known ports.
const ( /* in.h:122:1: */
	IPPORT_ECHO       = 7  // Echo service.
	IPPORT_DISCARD    = 9  // Discard transmissions service.
	IPPORT_SYSTAT     = 11 // System status service.
	IPPORT_DAYTIME    = 13 // Time of day service.
	IPPORT_NETSTAT    = 15 // Network status service.
	IPPORT_FTP        = 21 // File Transfer Protocol.
	IPPORT_TELNET     = 23 // Telnet protocol.
	IPPORT_SMTP       = 25 // Simple Mail Transfer Protocol.
	IPPORT_TIMESERVER = 37 // Timeserver service.
	IPPORT_NAMESERVER = 42 // Domain Name Service.
	IPPORT_WHOIS      = 43 // Internet Whois service.
	IPPORT_MTP        = 57

	IPPORT_TFTP    = 69 // Trivial File Transfer Protocol.
	IPPORT_RJE     = 77
	IPPORT_FINGER  = 79 // Finger service.
	IPPORT_TTYLINK = 87
	IPPORT_SUPDUP  = 95 // SUPDUP protocol.

	IPPORT_EXECSERVER  = 512 // execd service.
	IPPORT_LOGINSERVER = 513 // rlogind service.
	IPPORT_CMDSERVER   = 514
	IPPORT_EFSSERVER   = 520

	// UDP ports.
	IPPORT_BIFFUDP     = 512
	IPPORT_WHOSERVER   = 513
	IPPORT_ROUTESERVER = 520

	// Ports less than this value are reserved for privileged processes.
	IPPORT_RESERVED = 1024

	// Ports greater this value are reserved for (non-privileged) servers.
	IPPORT_USERRESERVED = 5000
)

// Options for use with `getsockopt' and `setsockopt' at the IPv6 level.
//   The first word in the comment at the right is the data type used;
//   "bool" means a boolean value stored in an `int'.

// Advanced API (RFC3542) (1).

// Advanced API (RFC3542) (2).

// RFC5014.

// RFC5082.

// Obsolete synonyms for the above.

// IPV6_MTU_DISCOVER values.

// Socket level values for IPv6.

// Routing header options for IPv6.

// Standard well-defined IP protocols.
const ( /* in.h:40:1: */
	IPPROTO_IP      = 0   // Dummy protocol for TCP.
	IPPROTO_ICMP    = 1   // Internet Control Message Protocol.
	IPPROTO_IGMP    = 2   // Internet Group Management Protocol.
	IPPROTO_IPIP    = 4   // IPIP tunnels (older KA9Q tunnels use 94).
	IPPROTO_TCP     = 6   // Transmission Control Protocol.
	IPPROTO_EGP     = 8   // Exterior Gateway Protocol.
	IPPROTO_PUP     = 12  // PUP protocol.
	IPPROTO_UDP     = 17  // User Datagram Protocol.
	IPPROTO_IDP     = 22  // XNS IDP protocol.
	IPPROTO_TP      = 29  // SO Transport Protocol Class 4.
	IPPROTO_DCCP    = 33  // Datagram Congestion Control Protocol.
	IPPROTO_IPV6    = 41  // IPv6 header.
	IPPROTO_RSVP    = 46  // Reservation Protocol.
	IPPROTO_GRE     = 47  // General Routing Encapsulation.
	IPPROTO_ESP     = 50  // encapsulating security payload.
	IPPROTO_AH      = 51  // authentication header.
	IPPROTO_MTP     = 92  // Multicast Transport Protocol.
	IPPROTO_BEETPH  = 94  // IP option pseudo header for BEET.
	IPPROTO_ENCAP   = 98  // Encapsulation Header.
	IPPROTO_PIM     = 103 // Protocol Independent Multicast.
	IPPROTO_COMP    = 108 // Compression Header Protocol.
	IPPROTO_SCTP    = 132 // Stream Control Transmission Protocol.
	IPPROTO_UDPLITE = 136 // UDP-Lite protocol.
	IPPROTO_MPLS    = 137 // MPLS in IP.
	IPPROTO_RAW     = 255 // Raw IP packets.
	IPPROTO_MAX     = 256
)

// If __USE_KERNEL_IPV6_DEFS is 1 then the user has included the kernel
//   network headers first and we should use those ABI-identical definitions
//   instead of our own, otherwise 0.
const ( /* in.h:99:1: */
	IPPROTO_HOPOPTS  = 0  // IPv6 Hop-by-Hop options.
	IPPROTO_ROUTING  = 43 // IPv6 routing header.
	IPPROTO_FRAGMENT = 44 // IPv6 fragmentation header.
	IPPROTO_ICMPV6   = 58 // ICMPv6.
	IPPROTO_NONE     = 59 // IPv6 no next header.
	IPPROTO_DSTOPTS  = 60 // IPv6 destination options.
	IPPROTO_MH       = 135
)

// Bits in the FLAGS argument to `send', `recv', et al.
const ( /* socket.h:197:1: */
	MSG_OOB        = 1  // Process out-of-band data.
	MSG_PEEK       = 2  // Peek at incoming messages.
	MSG_DONTROUTE  = 4  // Don't use local routing.
	MSG_CTRUNC     = 8  // Control data lost before delivery.
	MSG_PROXY      = 16 // Supply or ask second address.
	MSG_TRUNC      = 32
	MSG_DONTWAIT   = 64  // Nonblocking IO.
	MSG_EOR        = 128 // End of record.
	MSG_WAITALL    = 256 // Wait for a full request.
	MSG_FIN        = 512
	MSG_SYN        = 1024
	MSG_CONFIRM    = 2048 // Confirm path validity.
	MSG_RST        = 4096
	MSG_ERRQUEUE   = 8192      // Fetch message from error queue.
	MSG_NOSIGNAL   = 16384     // Do not generate SIGPIPE.
	MSG_MORE       = 32768     // Sender will send more.
	MSG_WAITFORONE = 65536     // Wait for at least one packet to return.
	MSG_BATCH      = 262144    // sendmmsg: more messages coming.
	MSG_ZEROCOPY   = 67108864  // Use user data in kernel path.
	MSG_FASTOPEN   = 536870912 // Send data in TCP SYN.

	MSG_CMSG_CLOEXEC = 1073741824
)

// Socket level message types.  This must match the definitions in
//   <linux/socket.h>.
const ( /* socket.h:329:1: */
	SCM_RIGHTS = 1
)

// Get the architecture-dependent definition of enum __socket_type.
// Define enum __socket_type for generic Linux.
//   Copyright (C) 1991-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// Types of sockets.
const ( /* socket_type.h:24:1: */
	SOCK_STREAM = 1 // Sequenced, reliable, connection-based
	//				   byte streams.
	SOCK_DGRAM = 2 // Connectionless, unreliable datagrams
	//				   of fixed maximum length.
	SOCK_RAW       = 3 // Raw protocol interface.
	SOCK_RDM       = 4 // Reliably-delivered messages.
	SOCK_SEQPACKET = 5 // Sequenced, reliable, connection-based,
	//				   datagrams of fixed maximum length.
	SOCK_DCCP   = 6  // Datagram Congestion Control Protocol.
	SOCK_PACKET = 10 // Linux specific way of getting packets
	//				   at the dev level.  For writing rarp and
	//				   other similar things on the user level.

	// Flags to be ORed into the type parameter of socket and socketpair and
	//     used for the flags parameter of paccept.

	SOCK_CLOEXEC = 524288 // Atomically set close-on-exec flag for the
	//				   new descriptor(s).
	SOCK_NONBLOCK = 2048
)

// The following constants should be used for the second parameter of
//   `shutdown'.
const ( /* socket.h:41:1: */
	SHUT_RD   = 0 // No more receptions.
	SHUT_WR   = 1 // No more transmissions.
	SHUT_RDWR = 2
)

type Ptrdiff_t = int64 /* <builtin>:3:26 */

type Size_t = uint64 /* <builtin>:9:23 */

type Wchar_t = int32 /* <builtin>:15:24 */

type Uint8_t = uint8   /* stdint-uintn.h:24:19 */
type Uint16_t = uint16 /* stdint-uintn.h:25:20 */
type Uint32_t = uint32 /* stdint-uintn.h:26:20 */
type Uint64_t = uint64 /* stdint-uintn.h:27:20 */

// Wide character type.
//   Locale-writers should change this as necessary to
//   be big enough to hold unique values not between 0 and 127,
//   and not (wchar_t) -1, for each defined multibyte character.

// Define this type if we are doing the whole job,
//   or if we want this type in particular.

//  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
//    are already defined.
//  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.
//  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.

// A null pointer constant.

// Structure for scatter/gather I/O.
type Iovec = struct {
	Fiov_base uintptr
	Fiov_len  Size_t
}

// Copyright (C) 1989-2018 Free Software Foundation, Inc.
//
//This file is part of GCC.
//
//GCC is free software; you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation; either version 3, or (at your option)
//any later version.
//
//GCC is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//Under Section 7 of GPL version 3, you are granted additional
//permissions described in the GCC Runtime Library Exception, version
//3.1, as published by the Free Software Foundation.
//
//You should have received a copy of the GNU General Public License and
//a copy of the GCC Runtime Library Exception along with this program;
//see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
//<http://www.gnu.org/licenses/>.

// ISO C Standard:  7.17  Common definitions  <stddef.h>

// Any one of these symbols __need_* means that GNU libc
//   wants us just to define one data type.  So don't define
//   the symbols that indicate this file's entire job has been done.

// This avoids lossage on SunOS but only if stdtypes.h comes first.
//   There's no way to win with the other order!  Sun lossage.

// On 4.3bsd-net2, make sure ansi.h is included, so we have
//   one less case to deal with in the following.
// On FreeBSD 5, machine/ansi.h does not exist anymore...

// In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
//   defined if the corresponding type is *not* defined.
//   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
//   NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_

// Sequent's header files use _PTRDIFF_T_ in some conflicting way.
//   Just ignore it.

// On VxWorks, <type/vxTypesBase.h> may have defined macros like
//   _TYPE_size_t which will typedef size_t.  fixincludes patched the
//   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
//   not defined, and so that defining this macro defines _GCC_SIZE_T.
//   If we find that the macros are still defined at this point, we must
//   invoke them so that the type is defined as expected.

// In case nobody has defined these types, but we aren't running under
//   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
//   __WCHAR_TYPE__ have reasonable values.  This can happen if the
//   parts of GCC is compiled by an older compiler, that actually
//   include gstddef.h, such as collect2.

// Signed type of difference of two pointers.

// Define this type if we are doing the whole job,
//   or if we want this type in particular.

// Unsigned type of `sizeof' something.

// Define this type if we are doing the whole job,
//   or if we want this type in particular.

// Wide character type.
//   Locale-writers should change this as necessary to
//   be big enough to hold unique values not between 0 and 127,
//   and not (wchar_t) -1, for each defined multibyte character.

// Define this type if we are doing the whole job,
//   or if we want this type in particular.

//  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
//    are already defined.
//  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.
//  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.

// A null pointer constant.

// This operating system-specific header file defines the SOCK_*, PF_*,
//   AF_*, MSG_*, SOL_*, and SO_* constants, and the `struct sockaddr',
//   `struct msghdr', and `struct linger' types.
// System-specific socket constants and types.  Linux version.
//   Copyright (C) 1991-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// Copyright (C) 1989-2018 Free Software Foundation, Inc.
//
//This file is part of GCC.
//
//GCC is free software; you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation; either version 3, or (at your option)
//any later version.
//
//GCC is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//Under Section 7 of GPL version 3, you are granted additional
//permissions described in the GCC Runtime Library Exception, version
//3.1, as published by the Free Software Foundation.
//
//You should have received a copy of the GNU General Public License and
//a copy of the GCC Runtime Library Exception along with this program;
//see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
//<http://www.gnu.org/licenses/>.

// ISO C Standard:  7.17  Common definitions  <stddef.h>

// Any one of these symbols __need_* means that GNU libc
//   wants us just to define one data type.  So don't define
//   the symbols that indicate this file's entire job has been done.

// This avoids lossage on SunOS but only if stdtypes.h comes first.
//   There's no way to win with the other order!  Sun lossage.

// On 4.3bsd-net2, make sure ansi.h is included, so we have
//   one less case to deal with in the following.
// On FreeBSD 5, machine/ansi.h does not exist anymore...

// In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
//   defined if the corresponding type is *not* defined.
//   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
//   NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_

// Sequent's header files use _PTRDIFF_T_ in some conflicting way.
//   Just ignore it.

// On VxWorks, <type/vxTypesBase.h> may have defined macros like
//   _TYPE_size_t which will typedef size_t.  fixincludes patched the
//   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
//   not defined, and so that defining this macro defines _GCC_SIZE_T.
//   If we find that the macros are still defined at this point, we must
//   invoke them so that the type is defined as expected.

// In case nobody has defined these types, but we aren't running under
//   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
//   __WCHAR_TYPE__ have reasonable values.  This can happen if the
//   parts of GCC is compiled by an older compiler, that actually
//   include gstddef.h, such as collect2.

// Signed type of difference of two pointers.

// Define this type if we are doing the whole job,
//   or if we want this type in particular.

// Unsigned type of `sizeof' something.

// Define this type if we are doing the whole job,
//   or if we want this type in particular.

// Wide character type.
//   Locale-writers should change this as necessary to
//   be big enough to hold unique values not between 0 and 127,
//   and not (wchar_t) -1, for each defined multibyte character.

// Define this type if we are doing the whole job,
//   or if we want this type in particular.

//  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
//    are already defined.
//  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.
//  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.

// A null pointer constant.

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

//	POSIX Standard: 2.6 Primitive System Data Types	<sys/types.h>

// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//   Copyright (C) 2002-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

type U_char = uint8                     /* types.h:33:18 */
type U_short = uint16                   /* types.h:34:19 */
type U_int = uint32                     /* types.h:35:17 */
type U_long = uint64                    /* types.h:36:18 */
type Quad_t = int64                     /* types.h:37:18 */
type U_quad_t = uint64                  /* types.h:38:20 */
type Fsid_t = struct{ F__val [2]int32 } /* types.h:39:18 */
type Loff_t = int64                     /* types.h:42:18 */

type Ino_t = uint64 /* types.h:47:17 */

type Dev_t = uint64 /* types.h:59:17 */

type Gid_t = uint32 /* types.h:64:17 */

type Mode_t = uint32 /* types.h:69:18 */

type Nlink_t = uint64 /* types.h:74:19 */

type Uid_t = uint32 /* types.h:79:17 */

type Off_t = int64 /* types.h:85:17 */

type Pid_t = int32 /* types.h:97:17 */

type Id_t = uint32 /* types.h:103:16 */

type Ssize_t = int64 /* types.h:108:19 */

type Daddr_t = int32   /* types.h:114:19 */
type Caddr_t = uintptr /* types.h:115:19 */

type Key_t = int32 /* types.h:121:17 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//   Copyright (C) 2002-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Returned by `clock'.
type Clock_t = int64 /* clock_t.h:7:19 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//   Copyright (C) 2002-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Clock ID used in clock and timer functions.
type Clockid_t = int32 /* clockid_t.h:7:21 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//   Copyright (C) 2002-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Returned by `time'.
type Time_t = int64 /* time_t.h:7:18 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//   Copyright (C) 2002-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Timer ID returned by `timer_create'.
type Timer_t = uintptr /* timer_t.h:7:19 */

// Copyright (C) 1989-2018 Free Software Foundation, Inc.
//
//This file is part of GCC.
//
//GCC is free software; you can redistribute it and/or modify
//it under the terms of the GNU General Public License as published by
//the Free Software Foundation; either version 3, or (at your option)
//any later version.
//
//GCC is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//Under Section 7 of GPL version 3, you are granted additional
//permissions described in the GCC Runtime Library Exception, version
//3.1, as published by the Free Software Foundation.
//
//You should have received a copy of the GNU General Public License and
//a copy of the GCC Runtime Library Exception along with this program;
//see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
//<http://www.gnu.org/licenses/>.

// ISO C Standard:  7.17  Common definitions  <stddef.h>

// Any one of these symbols __need_* means that GNU libc
//   wants us just to define one data type.  So don't define
//   the symbols that indicate this file's entire job has been done.

// This avoids lossage on SunOS but only if stdtypes.h comes first.
//   There's no way to win with the other order!  Sun lossage.

// On 4.3bsd-net2, make sure ansi.h is included, so we have
//   one less case to deal with in the following.
// On FreeBSD 5, machine/ansi.h does not exist anymore...

// In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
//   defined if the corresponding type is *not* defined.
//   FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_.
//   NetBSD defines _I386_ANSI_H_ and _X86_64_ANSI_H_ instead of _ANSI_H_

// Sequent's header files use _PTRDIFF_T_ in some conflicting way.
//   Just ignore it.

// On VxWorks, <type/vxTypesBase.h> may have defined macros like
//   _TYPE_size_t which will typedef size_t.  fixincludes patched the
//   vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
//   not defined, and so that defining this macro defines _GCC_SIZE_T.
//   If we find that the macros are still defined at this point, we must
//   invoke them so that the type is defined as expected.

// In case nobody has defined these types, but we aren't running under
//   GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
//   __WCHAR_TYPE__ have reasonable values.  This can happen if the
//   parts of GCC is compiled by an older compiler, that actually
//   include gstddef.h, such as collect2.

// Signed type of difference of two pointers.

// Define this type if we are doing the whole job,
//   or if we want this type in particular.

// Unsigned type of `sizeof' something.

// Define this type if we are doing the whole job,
//   or if we want this type in particular.

// Wide character type.
//   Locale-writers should change this as necessary to
//   be big enough to hold unique values not between 0 and 127,
//   and not (wchar_t) -1, for each defined multibyte character.

// Define this type if we are doing the whole job,
//   or if we want this type in particular.

//  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
//    are already defined.
//  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.
//  NetBSD 5 requires the I386_ANSI_H and X86_64_ANSI_H checks here.

// A null pointer constant.

// Old compatibility names for C types.
type Ulong = uint64  /* types.h:148:27 */
type Ushort = uint16 /* types.h:149:28 */
type Uint = uint32   /* types.h:150:22 */

// These size-specific names are used by some of the inet code.

// Define intN_t types.
//   Copyright (C) 2017-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//   Copyright (C) 2002-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

type Int8_t = int8   /* stdint-intn.h:24:18 */
type Int16_t = int16 /* stdint-intn.h:25:19 */
type Int32_t = int32 /* stdint-intn.h:26:19 */
type Int64_t = int64 /* stdint-intn.h:27:19 */

// These were defined by ISO C without the first `_'.
type U_int8_t = uint8   /* types.h:160:23 */
type U_int16_t = uint16 /* types.h:161:28 */
type U_int32_t = uint32 /* types.h:162:22 */
type U_int64_t = uint64 /* types.h:164:27 */

type Register_t = int32 /* types.h:169:13 */

// A set of signals to be blocked, unblocked, or waited for.
type Sigset_t = struct{ F__val [16]uint64 } /* sigset_t.h:7:20 */

// Get definition of timer specification structures.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//   Copyright (C) 2002-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// A time value that is accurate to the nearest
//   microsecond but also has a range of years.
type Timeval = struct {
	Ftv_sec  int64
	Ftv_usec int64
}

// NB: Include guard matches what <linux/time.h> uses.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//   Copyright (C) 2002-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// POSIX.1b structure for a time value.  This is like a `struct timeval' but
//   has nanoseconds instead of microseconds.
type Timespec = struct {
	Ftv_sec  int64
	Ftv_nsec int64
}

type Suseconds_t = int64 /* select.h:43:23 */

// Some versions of <linux/posix_types.h> define this macros.
// It's easier to assume 8-bit bytes than to get CHAR_BIT.

// fd_set for select and pselect.
type Fd_set = struct{ F__fds_bits [16]int64 } /* select.h:70:5 */

// Maximum number of file descriptors in `fd_set'.

// Sometimes the fd_set member is assumed to have this type.
type Fd_mask = int64 /* select.h:77:19 */

// Define some inlines helping to catch common problems.

type Blksize_t = int64 /* types.h:202:21 */

// Types from the Large File Support interface.
type Blkcnt_t = int64    /* types.h:209:20 */ // Type to count number of disk blocks.
type Fsblkcnt_t = uint64 /* types.h:213:22 */ // Type to count file system blocks.
type Fsfilcnt_t = uint64 /* types.h:217:22 */ // Type to count file system inodes.

// Now add the thread types.
// Declaration of common pthread types for all architectures.
//   Copyright (C) 2017-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// For internal mutex and condition variable definitions.
// Common threading primitives definitions for both POSIX and C11.
//   Copyright (C) 2017-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// Arch-specific definitions.  Each architecture must define the following
//   macros to define the expected sizes of pthread data types:
//
//   __SIZEOF_PTHREAD_ATTR_T        - size of pthread_attr_t.
//   __SIZEOF_PTHREAD_MUTEX_T       - size of pthread_mutex_t.
//   __SIZEOF_PTHREAD_MUTEXATTR_T   - size of pthread_mutexattr_t.
//   __SIZEOF_PTHREAD_COND_T        - size of pthread_cond_t.
//   __SIZEOF_PTHREAD_CONDATTR_T    - size of pthread_condattr_t.
//   __SIZEOF_PTHREAD_RWLOCK_T      - size of pthread_rwlock_t.
//   __SIZEOF_PTHREAD_RWLOCKATTR_T  - size of pthread_rwlockattr_t.
//   __SIZEOF_PTHREAD_BARRIER_T     - size of pthread_barrier_t.
//   __SIZEOF_PTHREAD_BARRIERATTR_T - size of pthread_barrierattr_t.
//
//   Also, the following macros must be define for internal pthread_mutex_t
//   struct definitions (struct __pthread_mutex_s):
//
//   __PTHREAD_COMPAT_PADDING_MID   - any additional members after 'kind'
//				    and before '__spin' (for 64 bits) or
//				    '__nusers' (for 32 bits).
//   __PTHREAD_COMPAT_PADDING_END   - any additional members at the end of
//				    the internal structure.
//   __PTHREAD_MUTEX_LOCK_ELISION   - 1 if the architecture supports lock
//				    elision or 0 otherwise.
//   __PTHREAD_MUTEX_NUSERS_AFTER_KIND - control where to put __nusers.  The
//				       preferred value for new architectures
//				       is 0.
//   __PTHREAD_MUTEX_USE_UNION      - control whether internal __spins and
//				    __list will be place inside a union for
//				    linuxthreads compatibility.
//				    The preferred value for new architectures
//				    is 0.
//
//   For a new port the preferred values for the required defines are:
//
//   #define __PTHREAD_COMPAT_PADDING_MID
//   #define __PTHREAD_COMPAT_PADDING_END
//   #define __PTHREAD_MUTEX_LOCK_ELISION         0
//   #define __PTHREAD_MUTEX_NUSERS_AFTER_KIND    0
//   #define __PTHREAD_MUTEX_USE_UNION            0
//
//   __PTHREAD_MUTEX_LOCK_ELISION can be set to 1 if the hardware plans to
//   eventually support lock elision using transactional memory.
//
//   The additional macro defines any constraint for the lock alignment
//   inside the thread structures:
//
//   __LOCK_ALIGNMENT - for internal lock/futex usage.
//
//   Same idea but for the once locking primitive:
//
//   __ONCE_ALIGNMENT - for pthread_once_t/once_flag definition.
//
//   And finally the internal pthread_rwlock_t (struct __pthread_rwlock_arch_t)
//   must be defined.
//
// Copyright (C) 2002-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// Determine the wordsize from the preprocessor defines.

// Both x86-64 and x32 use the 64-bit system call interface.

// Definitions for internal mutex struct.

type X__pthread_rwlock_arch_t = struct {
	F__readers       uint32
	F__writers       uint32
	F__wrphase_futex uint32
	F__writers_futex uint32
	F__pad3          uint32
	F__pad4          uint32
	F__cur_writer    int32
	F__shared        int32
	F__rwelision     int8
	F__pad1          [7]uint8
	F__pad2          uint64
	F__flags         uint32
	_                [4]byte
}

// Common definition of pthread_mutex_t.

type X__pthread_internal_list = struct {
	F__prev uintptr
	F__next uintptr
}

// Lock elision support.

type X__pthread_mutex_s = struct {
	F__lock    int32
	F__count   uint32
	F__owner   int32
	F__nusers  uint32
	F__kind    int32
	F__spins   int16
	F__elision int16
	F__list    struct {
		F__prev uintptr
		F__next uintptr
	}
}

// Common definition of pthread_cond_t.

type X__pthread_cond_s = struct {
	F__0            struct{ F__wseq uint64 }
	F__8            struct{ F__g1_start uint64 }
	F__g_refs       [2]uint32
	F__g_size       [2]uint32
	F__g1_orig_size uint32
	F__wrefs        uint32
	F__g_signals    [2]uint32
}

// Thread identifiers.  The structure of the attribute type is not
//   exposed on purpose.
type Pthread_t = uint64 /* pthreadtypes.h:27:27 */

// Data structures for mutex handling.  The structure of the attribute
//   type is not exposed on purpose.
type Pthread_mutexattr_t = struct {
	_       [0]uint32
	F__size [4]int8
} /* pthreadtypes.h:36:3 */

// Data structure for condition variable handling.  The structure of
//   the attribute type is not exposed on purpose.
type Pthread_condattr_t = struct {
	_       [0]uint32
	F__size [4]int8
} /* pthreadtypes.h:45:3 */

// Keys for thread-specific data
type Pthread_key_t = uint32 /* pthreadtypes.h:49:22 */

// Once-only execution
type Pthread_once_t = int32 /* pthreadtypes.h:53:30 */

type Pthread_attr_t1 = struct {
	_       [0]uint64
	F__size [56]int8
}

type Pthread_attr_t = Pthread_attr_t1 /* pthreadtypes.h:62:30 */

type Pthread_mutex_t = struct{ F__data X__pthread_mutex_s } /* pthreadtypes.h:72:3 */

type Pthread_cond_t = struct{ F__data X__pthread_cond_s } /* pthreadtypes.h:80:3 */

// Data structure for reader-writer lock variable handling.  The
//   structure of the attribute type is deliberately not exposed.
type Pthread_rwlock_t = struct{ F__data X__pthread_rwlock_arch_t } /* pthreadtypes.h:91:3 */

type Pthread_rwlockattr_t = struct {
	_       [0]uint64
	F__size [8]int8
} /* pthreadtypes.h:97:3 */

// POSIX spinlock data type.
type Pthread_spinlock_t = int32 /* pthreadtypes.h:103:22 */

// POSIX barriers data type.  The structure of the type is
//   deliberately not exposed.
type Pthread_barrier_t = struct {
	_       [0]uint64
	F__size [32]int8
} /* pthreadtypes.h:112:3 */

type Pthread_barrierattr_t = struct {
	_       [0]uint32
	F__size [4]int8
} /* pthreadtypes.h:118:3 */

// Type for length arguments in socket calls.
type Socklen_t = uint32 /* socket.h:33:21 */

// Protocol families.

// Address families.

// Socket level values.  Others are defined in the appropriate headers.
//
//   XXX These definitions also should go into the appropriate headers as
//   far as they are available.

// Maximum queue length specifiable by listen.

// Get the definition of the macro to define the common sockaddr members.
// Definition of struct sockaddr_* common members and sizes, generic version.
//   Copyright (C) 1995-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/socket.h> instead.

// POSIX.1g specifies this type name for the `sa_family' member.
type Sa_family_t = uint16 /* sockaddr.h:28:28 */

// This macro is used to declare the initial common members
//   of the data types used for socket addresses, `struct sockaddr',
//   `struct sockaddr_in', `struct sockaddr_un', etc.

// Size of struct sockaddr_storage.

// Structure describing a generic socket address.
type Sockaddr = struct {
	Fsa_family Sa_family_t
	Fsa_data   [14]int8
}

// Structure large enough to hold any socket address (with the historical
//   exception of AF_UNIX).

type Sockaddr_storage = struct {
	Fss_family    Sa_family_t
	F__ss_padding [118]int8
	F__ss_align   uint64
}

// Structure describing messages sent by
//   `sendmsg' and received by `recvmsg'.
type Msghdr = struct {
	Fmsg_name       uintptr
	Fmsg_namelen    Socklen_t
	Fmsg_iov        uintptr
	Fmsg_iovlen     Size_t
	Fmsg_control    uintptr
	Fmsg_controllen Size_t
	Fmsg_flags      int32
	_               [4]byte
}

// Structure used for storage of ancillary data object information.
type Cmsghdr = struct {
	_           [0]uint64
	Fcmsg_len   Size_t
	Fcmsg_level int32
	Fcmsg_type  int32
}

// Ugly workaround for unclean kernel headers.

// Get socket manipulation related informations from kernel headers.
// SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note

// SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note

// Socket-level I/O control calls.

// For setsockopt(2)

// Security levels - as per NRL IPv6 - don't actually do anything

// Socket filtering

// Instruct lower device to use last 4-bytes of skb data as FCS

// Structure used to manipulate the SO_LINGER option.
type Linger = struct {
	Fl_onoff  int32
	Fl_linger int32
}

// This is the 4.3 BSD `struct sockaddr' format, which is used as wire
//   format in the grotty old 4.3 `talk' protocol.
type Osockaddr = struct {
	Fsa_family uint16
	Fsa_data   [14]uint8
}

// Define some macros helping to catch buffer overflows.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//   Copyright (C) 2002-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Internet address.
type In_addr_t = Uint32_t /* in.h:30:18 */
type In_addr = struct{ Fs_addr In_addr_t }

// Get system-specific definitions.
// Copyright (C) 1991-2018 Free Software Foundation, Inc.
//   This file is part of the GNU C Library.
//
//   The GNU C Library is free software; you can redistribute it and/or
//   modify it under the terms of the GNU Lesser General Public
//   License as published by the Free Software Foundation; either
//   version 2.1 of the License, or (at your option) any later version.
//
//   The GNU C Library is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//   Lesser General Public License for more details.
//
//   You should have received a copy of the GNU Lesser General Public
//   License along with the GNU C Library; if not, see
//   <http://www.gnu.org/licenses/>.

// Linux version.

// If the application has already included linux/in6.h from a linux-based
//   kernel then we will not define the IPv6 IPPROTO_* defines, in6_addr (nor the
//   defines), sockaddr_in6, or ipv6_mreq. Same for in6_ptkinfo or ip6_mtuinfo
//   in linux/ipv6.h. The ABI used by the linux-kernel and glibc match exactly.
//   Neither the linux kernel nor glibc should break this ABI without coordination.
//   In upstream kernel 56c176c9 the _UAPI prefix was stripped so we need to check
//   for _LINUX_IN6_H and _IPV6_H now, and keep checking the old versions for
//   maximum backwards compatibility.

// Options for use with `getsockopt' and `setsockopt' at the IP level.
//   The first word in the comment at the right is the data type used;
//   "bool" means a boolean value stored in an `int'.
// For BSD compatibility.

// TProxy original addresses

// IP_MTU_DISCOVER arguments.
// Always use interface mtu (ignores dst pmtu) but don't set DF flag.
//   Also incoming ICMP frag_needed notifications will be ignored on
//   this socket to prevent accepting spoofed ones.
// Like IP_PMTUDISC_INTERFACE but allow packets to be fragmented.

// To select the IP level.

// Structure used to describe IP options for IP_OPTIONS and IP_RETOPTS.
//   The `ip_dst' field is used for the first-hop gateway when using a
//   source route (this gets put into the header proper).
type Ip_opts = struct {
	Fip_dst  struct{ Fs_addr In_addr_t }
	Fip_opts [40]int8
}

// Like `struct ip_mreq' but including interface specification by index.
type Ip_mreqn = struct {
	Fimr_multiaddr struct{ Fs_addr In_addr_t }
	Fimr_address   struct{ Fs_addr In_addr_t }
	Fimr_ifindex   int32
}

// Structure used for IP_PKTINFO.
type In_pktinfo = struct {
	Fipi_ifindex  int32
	Fipi_spec_dst struct{ Fs_addr In_addr_t }
	Fipi_addr     struct{ Fs_addr In_addr_t }
}

// Type to represent a port.
type In_port_t = Uint16_t /* in.h:119:18 */

// Definitions of the bits in an Internet address integer.
//
//   On subnets, host and network parts are found according to
//   the subnet mask, not these masks.

// Address to accept any incoming messages.
// Address to send to all hosts.
// Address indicating an error return.

// Network number for local host loopback.
// Address to loopback in software to local host.

// Defines for Multicast INADDR.

// IPv6 address
type In6_addr = struct {
	F__in6_u struct {
		_           [0]uint32
		F__u6_addr8 [16]Uint8_t
	}
}

// ::1

// Structure describing an Internet socket address.
type Sockaddr_in = struct {
	Fsin_family Sa_family_t
	Fsin_port   In_port_t
	Fsin_addr   struct{ Fs_addr In_addr_t }
	Fsin_zero   [8]uint8
}

// Ditto, for IPv6.
type Sockaddr_in6 = struct {
	Fsin6_family   Sa_family_t
	Fsin6_port     In_port_t
	Fsin6_flowinfo Uint32_t
	Fsin6_addr     struct {
		F__in6_u struct {
			_           [0]uint32
			F__u6_addr8 [16]Uint8_t
		}
	}
	Fsin6_scope_id Uint32_t
}

// IPv4 multicast request.
type Ip_mreq = struct {
	Fimr_multiaddr struct{ Fs_addr In_addr_t }
	Fimr_interface struct{ Fs_addr In_addr_t }
}

type Ip_mreq_source = struct {
	Fimr_multiaddr  struct{ Fs_addr In_addr_t }
	Fimr_interface  struct{ Fs_addr In_addr_t }
	Fimr_sourceaddr struct{ Fs_addr In_addr_t }
}

// Likewise, for IPv6.
type Ipv6_mreq = struct {
	Fipv6mr_multiaddr struct {
		F__in6_u struct {
			_           [0]uint32
			F__u6_addr8 [16]Uint8_t
		}
	}
	Fipv6mr_interface uint32
}

// Multicast group request.
type Group_req = struct {
	Fgr_interface Uint32_t
	Fgr_group     struct {
		Fss_family    Sa_family_t
		F__ss_padding [118]int8
		F__ss_align   uint64
	}
}

type Group_source_req = struct {
	Fgsr_interface Uint32_t
	Fgsr_group     struct {
		Fss_family    Sa_family_t
		F__ss_padding [118]int8
		F__ss_align   uint64
	}
	Fgsr_source struct {
		Fss_family    Sa_family_t
		F__ss_padding [118]int8
		F__ss_align   uint64
	}
}

// Full-state filter operations.
type Ip_msfilter = struct {
	Fimsf_multiaddr struct{ Fs_addr In_addr_t }
	Fimsf_interface struct{ Fs_addr In_addr_t }
	Fimsf_fmode     Uint32_t
	Fimsf_numsrc    Uint32_t
	Fimsf_slist     [1]struct{ Fs_addr In_addr_t }
}

type Group_filter = struct {
	Fgf_interface Uint32_t
	Fgf_group     struct {
		Fss_family    Sa_family_t
		F__ss_padding [118]int8
		F__ss_align   uint64
	}
	Fgf_fmode  Uint32_t
	Fgf_numsrc Uint32_t
	Fgf_slist  [1]struct {
		Fss_family    Sa_family_t
		F__ss_padding [118]int8
		F__ss_align   uint64
	}
}

var _ int8 /* x.c:2:13: */
